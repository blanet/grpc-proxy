// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type HelloRequest struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{2}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type HelloResponse struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	Cnt                  int32    `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{3}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func (m *HelloResponse) GetCnt() int32 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type DemoMsgV1 struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DemoMsgV1) Reset()         { *m = DemoMsgV1{} }
func (m *DemoMsgV1) String() string { return proto.CompactTextString(m) }
func (*DemoMsgV1) ProtoMessage()    {}
func (*DemoMsgV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{4}
}

func (m *DemoMsgV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DemoMsgV1.Unmarshal(m, b)
}
func (m *DemoMsgV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DemoMsgV1.Marshal(b, m, deterministic)
}
func (m *DemoMsgV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoMsgV1.Merge(m, src)
}
func (m *DemoMsgV1) XXX_Size() int {
	return xxx_messageInfo_DemoMsgV1.Size(m)
}
func (m *DemoMsgV1) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoMsgV1.DiscardUnknown(m)
}

var xxx_messageInfo_DemoMsgV1 proto.InternalMessageInfo

func (m *DemoMsgV1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DemoMsgV1) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type DemoMsgV2 struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DemoMsgV2) Reset()         { *m = DemoMsgV2{} }
func (m *DemoMsgV2) String() string { return proto.CompactTextString(m) }
func (*DemoMsgV2) ProtoMessage()    {}
func (*DemoMsgV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{5}
}

func (m *DemoMsgV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DemoMsgV2.Unmarshal(m, b)
}
func (m *DemoMsgV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DemoMsgV2.Marshal(b, m, deterministic)
}
func (m *DemoMsgV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoMsgV2.Merge(m, src)
}
func (m *DemoMsgV2) XXX_Size() int {
	return xxx_messageInfo_DemoMsgV2.Size(m)
}
func (m *DemoMsgV2) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoMsgV2.DiscardUnknown(m)
}

var xxx_messageInfo_DemoMsgV2 proto.InternalMessageInfo

func (m *DemoMsgV2) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DemoMsgV2) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "example.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "example.EmptyResponse")
	proto.RegisterType((*HelloRequest)(nil), "example.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "example.HelloResponse")
	proto.RegisterType((*DemoMsgV1)(nil), "example.DemoMsgV1")
	proto.RegisterType((*DemoMsgV2)(nil), "example.DemoMsgV2")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4d, 0x4b, 0xf3, 0x40,
	0x14, 0x85, 0xdf, 0xbc, 0x55, 0x4b, 0x2f, 0x8d, 0xca, 0x80, 0x12, 0x5c, 0x95, 0x59, 0x75, 0xd3,
	0xf4, 0x0b, 0x17, 0x6e, 0xa4, 0x15, 0x0b, 0x6e, 0x74, 0x11, 0xd1, 0x85, 0xbb, 0x49, 0x7a, 0x09,
	0x85, 0xf9, 0x48, 0x67, 0x46, 0x4c, 0x7f, 0xa7, 0x7f, 0x48, 0x92, 0x4e, 0x6c, 0x5a, 0x14, 0x5a,
	0x77, 0xf7, 0x5e, 0xce, 0x73, 0x32, 0xe7, 0x40, 0xc0, 0xc7, 0x9c, 0x89, 0x8c, 0x63, 0x98, 0x69,
	0x65, 0x15, 0x69, 0xba, 0x95, 0x9e, 0x42, 0x7b, 0x26, 0x32, 0xbb, 0x8a, 0x70, 0xf9, 0x8e, 0xc6,
	0xd2, 0x33, 0xf0, 0xdd, 0x6e, 0x32, 0x25, 0x0d, 0xd2, 0x0e, 0xb4, 0x1f, 0x90, 0x73, 0xe5, 0x04,
	0xe4, 0x1c, 0x1a, 0x1a, 0x97, 0x81, 0xd7, 0xf1, 0xba, 0xad, 0xa8, 0x18, 0xe9, 0x18, 0x7c, 0xa7,
	0x58, 0x23, 0x6b, 0x89, 0xd9, 0x48, 0x4c, 0x71, 0x49, 0xa4, 0x0d, 0xfe, 0x77, 0xbc, 0xee, 0x71,
	0x54, 0x8c, 0x74, 0x08, 0xad, 0x7b, 0x14, 0xea, 0xd1, 0xa4, 0xaf, 0x43, 0x42, 0xe0, 0x48, 0x32,
	0x81, 0x8e, 0x28, 0xe7, 0x02, 0x61, 0x29, 0x56, 0x08, 0x4b, 0x91, 0xde, 0x6c, 0x90, 0xd1, 0x8f,
	0x48, 0x00, 0x4d, 0x36, 0x9f, 0x6b, 0x34, 0x26, 0x68, 0x94, 0xe7, 0x6a, 0x1d, 0x7d, 0x36, 0xa0,
	0x39, 0x5b, 0x27, 0x26, 0x13, 0xf0, 0x5f, 0x24, 0xd3, 0x45, 0xe2, 0x32, 0x29, 0xb9, 0x08, 0xab,
	0x6e, 0xea, 0x4d, 0x5c, 0x5d, 0x7e, 0x9f, 0xb7, 0xd2, 0xd1, 0x7f, 0x35, 0x07, 0xb3, 0xeb, 0x50,
	0xaf, 0xaa, 0xe6, 0xb0, 0x5d, 0xe9, 0xc6, 0x61, 0xca, 0xf9, 0x9e, 0x6f, 0xf8, 0xcd, 0xe1, 0x49,
	0xc9, 0x3d, 0xdf, 0xb0, 0x9b, 0xe2, 0x16, 0x5a, 0xcf, 0x56, 0x23, 0x13, 0x11, 0x2e, 0x0f, 0xa6,
	0xbb, 0x5e, 0x9d, 0x37, 0x07, 0xf3, 0x03, 0x8f, 0x4c, 0x2a, 0x7e, 0xca, 0xf9, 0x1f, 0xbe, 0x3f,
	0xf0, 0xee, 0xae, 0xdf, 0xc6, 0xe9, 0xc2, 0x72, 0x16, 0x87, 0x8c, 0x2f, 0x62, 0x16, 0xb3, 0xde,
	0x42, 0x26, 0x61, 0xa2, 0x44, 0x5f, 0xa8, 0x0f, 0x94, 0x69, 0x98, 0xe7, 0xfd, 0x54, 0x67, 0x49,
	0x2f, 0xd3, 0x2a, 0x5f, 0xf5, 0x9d, 0x55, 0x7c, 0x52, 0xfe, 0x02, 0xe3, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x48, 0xf1, 0xd9, 0xb1, 0x13, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleClient interface {
	UnaryReqEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	UnaryResEmpty(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnaryAllEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnaryNonEmpty(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (Example_StreamReqClient, error)
	StreamRes(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Example_StreamResClient, error)
	StreamAll(ctx context.Context, opts ...grpc.CallOption) (Example_StreamAllClient, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) UnaryReqEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/example.Example/UnaryReqEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryResEmpty(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/example.Example/UnaryResEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryAllEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/example.Example/UnaryAllEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryNonEmpty(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/example.Example/UnaryNonEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (Example_StreamReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Example_serviceDesc.Streams[0], "/example.Example/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleStreamReqClient{stream}
	return x, nil
}

type Example_StreamReqClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type exampleStreamReqClient struct {
	grpc.ClientStream
}

func (x *exampleStreamReqClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleStreamReqClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) StreamRes(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Example_StreamResClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Example_serviceDesc.Streams[1], "/example.Example/StreamRes", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleStreamResClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_StreamResClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type exampleStreamResClient struct {
	grpc.ClientStream
}

func (x *exampleStreamResClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) StreamAll(ctx context.Context, opts ...grpc.CallOption) (Example_StreamAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Example_serviceDesc.Streams[2], "/example.Example/StreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleStreamAllClient{stream}
	return x, nil
}

type Example_StreamAllClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type exampleStreamAllClient struct {
	grpc.ClientStream
}

func (x *exampleStreamAllClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleStreamAllClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServer is the server API for Example service.
type ExampleServer interface {
	UnaryReqEmpty(context.Context, *EmptyRequest) (*HelloResponse, error)
	UnaryResEmpty(context.Context, *HelloRequest) (*EmptyResponse, error)
	UnaryAllEmpty(context.Context, *EmptyRequest) (*EmptyResponse, error)
	UnaryNonEmpty(context.Context, *HelloRequest) (*HelloResponse, error)
	StreamReq(Example_StreamReqServer) error
	StreamRes(*HelloRequest, Example_StreamResServer) error
	StreamAll(Example_StreamAllServer) error
}

// UnimplementedExampleServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (*UnimplementedExampleServer) UnaryReqEmpty(ctx context.Context, req *EmptyRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryReqEmpty not implemented")
}
func (*UnimplementedExampleServer) UnaryResEmpty(ctx context.Context, req *HelloRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryResEmpty not implemented")
}
func (*UnimplementedExampleServer) UnaryAllEmpty(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryAllEmpty not implemented")
}
func (*UnimplementedExampleServer) UnaryNonEmpty(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryNonEmpty not implemented")
}
func (*UnimplementedExampleServer) StreamReq(srv Example_StreamReqServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReq not implemented")
}
func (*UnimplementedExampleServer) StreamRes(req *HelloRequest, srv Example_StreamResServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRes not implemented")
}
func (*UnimplementedExampleServer) StreamAll(srv Example_StreamAllServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAll not implemented")
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_UnaryReqEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryReqEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example/UnaryReqEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryReqEmpty(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryResEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryResEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example/UnaryResEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryResEmpty(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryAllEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryAllEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example/UnaryAllEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryAllEmpty(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryNonEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryNonEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example/UnaryNonEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryNonEmpty(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).StreamReq(&exampleStreamReqServer{stream})
}

type Example_StreamReqServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type exampleStreamReqServer struct {
	grpc.ServerStream
}

func (x *exampleStreamReqServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleStreamReqServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_StreamRes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).StreamRes(m, &exampleStreamResServer{stream})
}

type Example_StreamResServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type exampleStreamResServer struct {
	grpc.ServerStream
}

func (x *exampleStreamResServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_StreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).StreamAll(&exampleStreamAllServer{stream})
}

type Example_StreamAllServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type exampleStreamAllServer struct {
	grpc.ServerStream
}

func (x *exampleStreamAllServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleStreamAllServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryReqEmpty",
			Handler:    _Example_UnaryReqEmpty_Handler,
		},
		{
			MethodName: "UnaryResEmpty",
			Handler:    _Example_UnaryResEmpty_Handler,
		},
		{
			MethodName: "UnaryAllEmpty",
			Handler:    _Example_UnaryAllEmpty_Handler,
		},
		{
			MethodName: "UnaryNonEmpty",
			Handler:    _Example_UnaryNonEmpty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReq",
			Handler:       _Example_StreamReq_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRes",
			Handler:       _Example_StreamRes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAll",
			Handler:       _Example_StreamAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
